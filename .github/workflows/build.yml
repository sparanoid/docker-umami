name: Build

on:
  push:
    branches:
      - 'master'
    tags:
      - 'v*'
  pull_request:
    branches:
      - 'master'
  schedule:
    - cron: '21 12 * * *'
  workflow_dispatch:

env:
  DOCKERHUB_SLUG: sparanoid/umami

jobs:
  docker:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        umami: [
          postgresql-latest,
          mysql-latest,
        ]

    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        env:
          BASE_TAG: ${{ matrix.umami }}
        with:
          images: |
            ${{ env.DOCKERHUB_SLUG }}
          tags: |
            type=raw,value=${{ env.BASE_TAG }}

      - name: Build and push
        uses: docker/bake-action@v3
        env:
          BASE_TAG: ${{ matrix.umami }}
        with:
          files: |
            ./docker-bake.hcl
            ${{ steps.meta.outputs.bake-file }}
          targets: build-all
          push: ${{ github.event_name != 'pull_request' }}
          set: |
            *.cache-from=type=registry,ref=${{ env.DOCKERHUB_SLUG }}:${{ env.BASE_TAG }}-buildcache
            *.cache-to=type=registry,ref=${{ env.DOCKERHUB_SLUG }}:${{ env.BASE_TAG }}-buildcache,mode=max

      - name: Check manifest
        if: github.event_name != 'pull_request'
        run: |
          docker buildx imagetools inspect ${{ env.DOCKERHUB_SLUG }}:${{ steps.meta.outputs.version }}

      - name: Inspect image
        if: github.event_name != 'pull_request'
        run: |
          docker pull ${{ env.DOCKERHUB_SLUG }}:${{ steps.meta.outputs.version }}
          docker image inspect ${{ env.DOCKERHUB_SLUG }}:${{ steps.meta.outputs.version }}
